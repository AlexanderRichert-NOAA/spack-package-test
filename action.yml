# This action.yml provides a GitHub Action for testing modified code
# repositories through their corresponding Spack recipe (or a custom
# copy thereof). It does so by downloading Spack, building the modified
# code through Spack, and running unit tests ("spack install --test").
#
# Alex Richert, April 2024
name: 'Spack package tester'
description: 'Install and test code through Spack'

inputs:
  package-name:
    description: 'Spack package name to be tested (no version number or variants)'
    required: true
  package-version:
    description: 'Version of Spack package to be tested'
    required: false
    default: 'develop'
  package-variants:
    description: 'Variants to apply to package spec'
    required: false
  custom-recipe:
    description: 'Path to custom recipe for package to be tested, relative to repo root'
    required: false
    default: 'none'
  dependents-to-test:
    description: 'Spack packages to also run unit tests for (space-delimited list with variants)'
    required: false
  use-build-cache:
    description: 'Create build cache of dependencies and save to GitHub Packages'
    default: false
  upload-artifacts:
    description: 'Upload certain logs on job failure (options: always, never, on-failure)'
    required: false
    default: 'on-failure'
  repo-dir:
    description: 'Directory containing modified code to be tested (default is to download automatically)'
    required: false
    default: 'auto'
  spack-ref:
    description: 'Spack tag/branch/commit to use'
    required: false
    default: '66622ec4d0903123de65974516ba7e5480206be1' # revert to 'develop' once self.build_directory regression is resolved
  cpu-target:
    description: 'Spack CPU target'
    required: false
    default: 'x86_64'
  spack-externals:
    description: 'External packages for Spack to try to use'
    required: false
    default: 'cmake gmake perl'
  spack-compiler:
    description: 'Set spec for Spack compiler (e.g., "gcc@12")'
    required: false
  parallel-jobs:
    description: 'Set number of Spack parallel install jobs ("spack install -j/--jobs")'
    required: false
    default: 2
  spack-root:
    description: 'Spack root directory'
    required: false
    default: 'spack-root'
  cache-secret:
    description: 'Secret for build cache'
    required: false
  unique-id:
    description: 'Unique ID for artifact name'
    required: false
  use-repo-cache:
    description: 'Enable repo-level caching'
    default: true
  repo-cache-key-suffix:
    description: 'String to append to repo-level cache key'
    default: 1
  cache-spack-lock:
    description: 'Cache spack.lock to speed up concretization'
    default: true
  test-package-load:
    description: 'Run "spack load <package-name>" to verify setup_run_environment() does not fail'
    default: true

runs:
  using: "composite"
  steps:

    - name: "Get the updated code if needed"
      uses: actions/checkout@v4
      if: inputs.repo-dir == 'auto'
      with: 
        path: spack-devpkg-${{ inputs.package-name }}
        submodules: recursive

    - name: "Point to existing code if needed"
      if: inputs.repo-dir != 'auto'
      shell: bash
      run: |
        ln -s ${{ inputs.repo-dir }} spack-devpkg-${{ inputs.package-name }}

    - name: "Get Spack"
      uses: spack/setup-spack@v2
      with:
        ref: ${{ inputs.spack-ref }}
        path: ${{ inputs.spack-root }}

    - name: "Update recipe (if needed)"
      if: inputs.custom-recipe != 'none'
      shell: bash
      run: |
        mkdir -p ${{ inputs.spack-root }}/var/spack/repos/builtin/packages/${{ inputs.package-name }}/
        cp spack-devpkg-${{ inputs.package-name }}/${{ inputs.custom-recipe }} ${{ inputs.spack-root }}/var/spack/repos/builtin/packages/${{ inputs.package-name }}/package.py

    - name: "Restore repo-level cache"
      uses: actions/cache/restore@v4
      id: restore-repo-cache
      if: inputs.use-repo-cache == 'true'
      with:
        path: ${{ github.workspace }}/spack-build-cache
        key: repo-cache-${{ inputs.repo-cache-key-suffix }}

    - name: "Cache spack.lock"
      uses: actions/cache@v4
      if: inputs.cache-spack-lock == 'true'
      with:
        path: ${{ github.workspace }}/${{ inputs.spack-root }}/spack.lock
        key: spack-lock-cache-${{ inputs.repo-cache-key-suffix }}

    - name: "Do Spack installation and tests"
      shell: spack-bash {0}
      run: |
        if [ "${{ inputs.use-build-cache }}" == true ]; then
          spack mirror add spack-build-cache oci://ghcr.io/NOAA-EMC/spack-build-cache
          spack mirror set --oci-username NOAA-EMC --oci-password "${{ inputs.cache-secret }}" spack-build-cache
        fi
        if [ "${{ inputs.use-repo-cache }}" == true ]; then
          spack mirror add spack-build-cache $GITHUB_WORKSPACE/spack-build-cache
        fi
        #spack mirror add emc-build-cache oci://ghcr.io/AlexanderRichert-NOAA/ci-playground
        spack env create --without-view test
        spack env activate test
        spack develop --no-clone --path ${GITHUB_WORKSPACE}/spack-devpkg-${{ inputs.package-name }} ${{ inputs.package-name }}@${{ inputs.package-version }}
        spack add ${{ inputs.package-name }}@${{ inputs.package-version }} ${{ inputs.package-variants }} target=${{ inputs.cpu-target }} ${{ inputs.dependents-to-test }}
        if [ ! -z "${{ inputs.spack-compiler }}" ]; then
          spack compiler find ${{ inputs.spack-compiler }}
          spack config add "packages:all:require:'%${{ inputs.spack-compiler }}'"
        fi
        if [ ! -z "${{ inputs.spack-externals }}" ]; then
          for package in ${{ inputs.spack-externals }}; do
            spack config add "packages:$package:buildable:false"
          done
          if [[ (" ${{ inputs.spack-externals }} " =~ " openblas ") && ( ${{ runner.os }} == Linux ) ]]; then
            spack external find --path /usr/lib/x86_64-linux-gnu/openblas-serial openblas
            spack config add "packages:lapack:buildable:false"
            spack config add "packages:blas:buildable:false"
          fi
          spack external find $(echo ${{ inputs.spack-externals }} | sed "s:\bopenblas\b::g")
        fi
        if [[ "${{ inputs.cache-spack-lock }}" == true && -f $SPACK_ROOT/spack.lock ]]; then
          cp ${{ inputs.spack-root }}/spack.lock $SPACK_ENV/.
        fi
        spack concretize 2> ${GITHUB_WORKSPACE}/spack-concretize-err.log 1> ${GITHUB_WORKSPACE}/spack-concretize-out.log
        if [[ "${{ inputs.cache-spack-lock }}" == true ]]; then
          cp $SPACK_ENV/spack.lock ${{ inputs.spack-root }}/.
        fi
        cat ${GITHUB_WORKSPACE}/spack-concretize-out.log
        realpath ${SPACK_ENV}/spack.yaml
        set +e
        spack install --jobs ${{ inputs.parallel-jobs }} --test root --no-check-signature
        rc=$?
        set -e
        if [ "${{ inputs.use-repo-cache }}" == true ]; then
          spack buildcache push --unsigned $GITHUB_WORKSPACE/spack-build-cache $(spack find --format '{name}' | grep -v ${{ inputs.package-name }})
        fi
        if [ ${{ inputs.test-package-load }} == true ]; then
          spack load ${{ inputs.package-name }}
        fi
        exit $rc

    - name: "Delete cache"
      if: steps.restore-repo-cache.cache-hit
      run: |
        gh cache delete repo-cache-${{ inputs.repo-cache-key-suffix }}

    - name: "Save repo-level cache"
      uses: actions/cache/save@v4
      if: always() && inputs.use-repo-cache == 'true'
      with:
        path: ${{ github.workspace }}/spack-build-cache
        key: repo-cache-${{ inputs.repo-cache-key-suffix }}

    - name: "Update Spack build cache"
      if: ${{ inputs.use-build-cache == 'true' }}
      shell: spack-bash {0}
      run: |
        spack buildcache push --update-index --only dependencies --unsigned spack-build-cache ${{ inputs.package-name }}

    - name: "Generate unique ID"
      if: ( failure() && inputs.upload-artifacts == 'on-failure' ) || inputs.upload-artifacts == 'always'
      shell: bash
      run: |
        if [ -z ${{ inputs.unique-id }} ]; then
          uniqid="${{ github.run_id }}-${{ github.run_attempt }}-${{ inputs.package-name }}-${{ inputs.package-version }}-${{ inputs.package-variants }}"
          uniqid="$uniqid$(date +%s.%N)"
          uniqid="${{ github.sha }}-$(echo $uniqid | md5sum | awk '{print $1}')"
        else
          uniqid=${{ inputs.unique-id }}
        fi
        echo "uniqid=$uniqid" >> $GITHUB_ENV

    - name: "Upload various debug info"
      uses: actions/upload-artifact@v4
      if: ( failure() && inputs.upload-artifacts == 'on-failure' ) || inputs.upload-artifacts == 'always'
      with:
        name: spack-package-test-artifacts-${{ env.uniqid }}
        path: |
          ${{ github.workspace }}/${{ inputs.spack-root }}/var/spack/environments/test/spack.yaml
          ${{ github.workspace }}/spack-concretize-out.log
          ${{ github.workspace }}/spack-concretize-err.log
          ${{ github.workspace }}/${{ inputs.spack-root }}/var/spack/environments/test/${{ inputs.package-name }}/spack-build-*/Testing/Temporary/LastTest.log
          /tmp/runner/spack-stage/spack-stage-*/spack-build-out.txt
          /tmp/runner/spack-stage/spack-stage-*/install-time-test-log.txt
          /tmp/runner/spack-stage/spack-stage-*/spack-build-*/Testing/Temporary/LastTest.log
          /tmp/runner/spack-stage/spack-stage-*/spack-build-*/FV3/ccpp/ccpp_prebuild.*
